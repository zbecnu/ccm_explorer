{"version":3,"sources":["webpack:///./src/app/block/block-routing.module.ts","webpack:///./src/app/block/block.module.ts","webpack:///./src/app/block/block/block.component.html","webpack:///./src/app/block/block/block.component.scss","webpack:///./src/app/block/block/block.component.ts","webpack:///./src/app/block/block/information/information.component.html","webpack:///./src/app/block/block/information/information.component.scss","webpack:///./src/app/block/block/information/information.component.ts","webpack:///./src/app/block/block/transactions/transactions.component.html","webpack:///./src/app/block/block/transactions/transactions.component.scss","webpack:///./src/app/block/block/transactions/transactions.component.ts","webpack:///./src/app/block/blocks/blocks.component.html","webpack:///./src/app/block/blocks/blocks.component.scss","webpack:///./src/app/block/blocks/blocks.component.ts"],"names":[],"mappings":"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","file":"block-block-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { BlocksComponent } from './blocks/blocks.component';\nimport { BlockComponent } from './block/block.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    component: BlocksComponent\n  },\n  {\n    path: ':id',\n    component: BlockComponent\n  },\n  {\n    path: ':id/transactions',\n    component: BlockComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class BlockRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../shared/shared.module';\nimport { BlockRoutingModule } from './block-routing.module';\nimport { MatPaginatorModule } from '@angular/material/paginator';\n\nimport { BlocksComponent } from './blocks/blocks.component';\nimport { BlockComponent } from './block/block.component';\nimport { InformationComponent } from './block/information/information.component';\nimport { TransactionsComponent } from './block/transactions/transactions.component';\n\n@NgModule({\n  imports: [\n    SharedModule,\n    BlockRoutingModule,\n    MatPaginatorModule\n  ],\n  declarations: [\n    BlocksComponent,\n    BlockComponent,\n    InformationComponent,\n    TransactionsComponent\n  ]\n})\nexport class BlockModule { }\n","module.exports = \"<mat-toolbar color=\\\"primary\\\">\\n  <h1 class=\\\"mat-headline\\\">\\n    {{ 'Block' | translate }} #{{id$ | async}}\\n  </h1>\\n</mat-toolbar>\\n<ng-container *ngIf=\\\"block$ | async as block; else loading\\\">\\n  <mat-tab-group color=\\\"primary\\\" dynamicHeight=\\\"true\\\" *ngIf=\\\"!block.isError; else error\\\">\\n    <mat-tab>\\n      <ng-template mat-tab-label>\\n        <mat-icon style=\\\"margin-right:5px;\\\">info</mat-icon>\\n        {{ 'BlockInformation' | translate }}\\n      </ng-template>\\n      <app-block-information [block]=\\\"block.value\\\"></app-block-information>\\n    </mat-tab>\\n    <mat-tab>\\n      <ng-template mat-tab-label>\\n        <mat-icon style=\\\"margin-right:5px;\\\">code</mat-icon>\\n        {{ 'BlockchainRawData' | translate }}\\n      </ng-template>\\n      <prettyjson [obj]=\\\"block.value\\\"></prettyjson>\\n      <!-- <div style=\\\"padding:10px;\\\">\\n        <ngx-json-viewer [json]=\\\"block.value\\\" [expanded]=\\\"false\\\"></ngx-json-viewer>\\n      </div> -->\\n    </mat-tab>\\n  </mat-tab-group>\\n  <ng-template #error>\\n    <app-error></app-error>\\n  </ng-template>\\n</ng-container>\\n<ng-template #loading>\\n  <app-spinner></app-spinner>\\n</ng-template>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { EosService } from '../../services/eos.service';\nimport { Result } from '../../models';\nimport { Observable } from 'rxjs';\nimport { switchMap, map } from 'rxjs/operators';\n\n@Component({\n  templateUrl: './block.component.html',\n  styleUrls: ['./block.component.scss']\n})\nexport class BlockComponent implements OnInit {\n\n  id$: Observable<number>;\n  block$: Observable<Result<any>>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private eosService: EosService\n  ) { }\n\n  ngOnInit() {\n    this.id$ = this.route.params.pipe(\n      map(params => +params.id)\n    );\n    this.block$ = this.id$.pipe(\n      switchMap(id => this.eosService.getBlockRaw(id))\n    );\n  }\n\n}\n","module.exports = \"<div *ngIf=\\\"block; else loading\\\" style=\\\"margin:10px;\\\">\\n  <mat-card>\\n    <mat-card-content class=\\\"table-container\\\">\\n      <table>\\n        <tr>\\n          <td>{{ 'Block Number' | translate }}:</td>\\n          <td>{{block.block_num}}</td>\\n        </tr>\\n        <tr>\\n          <td>{{ 'Block Producer' | translate }}:</td>\\n          <td>\\n            <a [routerLink]=\\\"['/producers',block.producer]\\\">{{block.producer}}</a>\\n          </td>\\n        </tr>\\n        <tr>\\n          <td>{{ 'Timestamp' | translate }}:</td>\\n          <td>{{block.timestamp | amFromUtc | date:'MMM d, y, h:mm:ss.SSS a'}}</td>\\n        </tr>\\n        <tr>\\n          <td>{{ 'Block ID' | translate }}:</td>\\n          <td>{{block.id}}</td>\\n        </tr>\\n        <tr>\\n          <td>{{ 'Previous Block ID' | translate }}:</td>\\n          <td>\\n            <span *ngIf=\\\"block.block_num <= 1\\\">{{block.previous}}</span>\\n            <a [routerLink]=\\\"['/blocks',block.block_num-1]\\\" *ngIf=\\\"block.block_num > 1\\\">{{block.previous}}</a>\\n          </td>\\n        </tr>\\n        <tr>\\n          <td>{{ 'Transaction Merkle Root' | translate }}:</td>\\n          <td>{{block.transaction_mroot}}</td>\\n        </tr>\\n        <tr>\\n          <td>{{ 'Action Merkle Root' | translate }}:</td>\\n          <td>{{block.action_mroot}}</td>\\n        </tr>\\n        <tr>\\n          <td>{{ 'Number of Transactions' | translate }}:</td>\\n          <td>{{block.transactions.length}}</td>\\n        </tr>\\n      </table>\\n    </mat-card-content>\\n  </mat-card>\\n  <div *ngIf=\\\"block.transactions.length\\\" style=\\\"margin-top:20px;\\\">\\n    <app-block-transactions [block]=\\\"block\\\"></app-block-transactions>\\n  </div>\\n</div>\\n<ng-template #loading>\\n  <app-spinner></app-spinner>\\n</ng-template>\\n\"","module.exports = \"\"","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-block-information',\n  templateUrl: './information.component.html',\n  styleUrls: ['./information.component.scss']\n})\nexport class InformationComponent implements OnInit {\n\n  @Input() block;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<app-table [dataSource]=\\\"block.transactions\\\" [title]=\\\"'Transactions' | translate\\\" [enablePager]=\\\"false\\\">\\n  <table mat-table [dataSource]=\\\"block.transactions\\\">\\n    <tr mat-header-row *matHeaderRowDef=\\\"transactionsColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: transactionsColumns;\\\"></tr>\\n    <ng-container matColumnDef=\\\"index\\\">\\n      <th mat-header-cell *matHeaderCellDef>{{ 'Index' | translate }}</th>\\n      <td mat-cell *matCellDef=\\\"let i = index\\\">\\n        {{i + 1}}\\n      </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"id\\\">\\n      <th mat-header-cell *matHeaderCellDef>{{ 'Transaction ID' | translate }}</th>\\n      <td mat-cell *matCellDef=\\\"let transaction\\\">\\n        <a [routerLink]=\\\"['/transactions',block.block_num,transaction.trx.id||transaction.trx]\\\">\\n          <id-64 [id]=\\\"transaction.trx.id || transaction.trx\\\"></id-64>\\n        </a>\\n      </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"status\\\">\\n      <th mat-header-cell *matHeaderCellDef>{{ 'Status' | translate }}</th>\\n      <td mat-cell *matCellDef=\\\"let transaction\\\">\\n        {{transaction.status}}\\n      </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"cpu\\\">\\n      <th mat-header-cell *matHeaderCellDef>{{ 'CPU Usage' | translate }}</th>\\n      <td mat-cell *matCellDef=\\\"let transaction\\\">\\n        {{transaction.cpu_usage_us | number }} µs\\n      </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"net\\\">\\n      <th mat-header-cell *matHeaderCellDef>{{ 'NET Usage' | translate }}</th>\\n      <td mat-cell *matCellDef=\\\"let transaction\\\">\\n        {{transaction.net_usage_words | toKB | number:'1.0-3'}} KB\\n      </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"actions\\\">\\n      <th mat-header-cell *matHeaderCellDef>{{ 'Actions' | translate }}</th>\\n      <td mat-cell *matCellDef=\\\"let transaction\\\">\\n        {{transaction.trx.transaction?.actions.length || 0}}\\n      </td>\\n    </ng-container>\\n  </table>\\n</app-table>\\n\"","module.exports = \":host {\\n  display: block; }\\n\"","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-block-transactions',\n  templateUrl: './transactions.component.html',\n  styleUrls: ['./transactions.component.scss']\n})\nexport class TransactionsComponent implements OnInit {\n\n  @Input() block;\n  transactionsColumns = [\n    'index',\n    'id',\n    'status',\n    'cpu',\n    'net',\n    'actions'\n  ];\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<mat-toolbar color=\\\"primary\\\">\\n  <h1 class=\\\"mat-headline\\\">\\n    {{ 'Blocks' | translate }}\\n  </h1>\\n</mat-toolbar>\\n<div style=\\\"margin:10px;\\\">\\n  <div class=\\\"table-container mat-elevation-z1\\\" *ngIf=\\\"blocks$ | async as blocks; else loading\\\">\\n    <table mat-table [dataSource]=\\\"blocks\\\" style=\\\"border:none;\\\">\\n      <ng-container *ngIf=\\\"columnHeaders$ | async as blocksColumns\\\">\\n        <tr mat-header-row *matHeaderRowDef=\\\"blocksColumns\\\"></tr>\\n        <tr mat-row *matRowDef=\\\"let row; columns: blocksColumns;\\\"></tr>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"block_num\\\">\\n        <th mat-header-cell *matHeaderCellDef>{{ 'Block Number' | translate }}</th>\\n        <td mat-cell *matCellDef=\\\"let block\\\">\\n          <a [routerLink]=\\\"['/blocks',block.block_num]\\\">{{block.block_num}}</a>\\n        </td>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"timestamp\\\">\\n        <th mat-header-cell *matHeaderCellDef>{{ 'Timestamp' | translate }}</th>\\n        <td mat-cell *matCellDef=\\\"let block\\\">\\n          {{block.timestamp | amFromUtc | date:'MMM d, y, h:mm:ss.SSS a'}}\\n        </td>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"producer\\\">\\n        <th mat-header-cell *matHeaderCellDef>{{ 'Producer' | translate }}</th>\\n        <td mat-cell *matCellDef=\\\"let block\\\">\\n          <a [routerLink]=\\\"['/producers',block.producer]\\\">{{block.producer}}</a>\\n        </td>\\n      </ng-container>\\n      <ng-container matColumnDef=\\\"transactions\\\">\\n        <th mat-header-cell *matHeaderCellDef>{{ 'Transactions' | translate }}</th>\\n        <td mat-cell *matCellDef=\\\"let block\\\">\\n          {{block.transactions.length}}\\n        </td>\\n      </ng-container>\\n    </table>\\n    <mat-paginator [pageIndex]=\\\"pageIndex\\\" [pageSize]=\\\"pageSize\\\" [length]=\\\"total\\\" (page)=\\\"onPaging($event)\\\"></mat-paginator>\\n  </div>\\n  <ng-template #loading>\\n    <app-spinner></app-spinner>\\n  </ng-template>\\n</div>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AppService } from '../../services/app.service';\n\n@Component({\n  templateUrl: './blocks.component.html',\n  styleUrls: ['./blocks.component.scss']\n})\nexport class BlocksComponent implements OnInit {\n\n  columnHeaders$: Observable<string[]> = of(BLOCK_COLUMNS);\n  blocks$: Observable<any[]>;\n  pageIndex = 0;\n  pageSize = 10;\n  total = 0;\n\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n    private appService: AppService\n  ) { }\n\n  ngOnInit() {\n    this.columnHeaders$ = this.breakpointObserver.observe(Breakpoints.XSmall).pipe(\n      map(result => result.matches ? BLOCK_COLUMNS.filter(c => c !== 'timestamp') : BLOCK_COLUMNS)\n    );\n    this.blocks$ = this.appService.getBlocks(this.pageIndex, this.pageSize).pipe(\n      tap(blocks => {\n        this.total = blocks[0].block_num;\n      })\n    );\n  }\n\n  onPaging(pageEvent) {\n    this.pageIndex = pageEvent.pageIndex;\n    this.blocks$ = this.appService.getBlocks(pageEvent.length - pageEvent.pageSize * pageEvent.pageIndex);\n  }\n\n}\n\nexport const BLOCK_COLUMNS = [\n  'block_num',\n  'timestamp',\n  'producer',\n  'transactions'\n];\n"],"sourceRoot":""}