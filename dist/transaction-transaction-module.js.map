{"version":3,"sources":["webpack:///./src/app/transaction/transaction-routing.module.ts","webpack:///./src/app/transaction/transaction.module.ts","webpack:///./src/app/transaction/transaction/actions/actions.component.html","webpack:///./src/app/transaction/transaction/actions/actions.component.scss","webpack:///./src/app/transaction/transaction/actions/actions.component.ts","webpack:///./src/app/transaction/transaction/data/data.component.html","webpack:///./src/app/transaction/transaction/data/data.component.scss","webpack:///./src/app/transaction/transaction/data/data.component.ts","webpack:///./src/app/transaction/transaction/information/information.component.html","webpack:///./src/app/transaction/transaction/information/information.component.scss","webpack:///./src/app/transaction/transaction/information/information.component.ts","webpack:///./src/app/transaction/transaction/transaction.component.html","webpack:///./src/app/transaction/transaction/transaction.component.scss","webpack:///./src/app/transaction/transaction/transaction.component.ts","webpack:///./src/app/transaction/transactions/transactions.component.html","webpack:///./src/app/transaction/transactions/transactions.component.scss","webpack:///./src/app/transaction/transactions/transactions.component.ts"],"names":[],"mappings":"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","file":"transaction-transaction-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { TransactionsComponent } from './transactions/transactions.component';\nimport { TransactionComponent } from './transaction/transaction.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    pathMatch: 'full',\n    component: TransactionsComponent\n  },\n  {\n    path: ':blockId/:id',\n    component: TransactionComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class TransactionRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { SharedModule } from '../shared/shared.module';\nimport { TransactionRoutingModule } from './transaction-routing.module';\nimport { MatPaginatorModule } from '@angular/material/paginator';\n\nimport { TransactionsComponent } from './transactions/transactions.component';\nimport { TransactionComponent } from './transaction/transaction.component';\nimport { InformationComponent } from './transaction/information/information.component';\nimport { DataComponent } from './transaction/data/data.component';\nimport { ActionsComponent } from './transaction/actions/actions.component';\n\n@NgModule({\n  imports: [\n    SharedModule,\n    TransactionRoutingModule,\n    MatPaginatorModule\n  ],\n  declarations: [\n    TransactionsComponent,\n    TransactionComponent,\n    InformationComponent,\n    DataComponent,\n    ActionsComponent\n  ]\n})\nexport class TransactionModule { }\n","module.exports = \"<app-table [dataSource]=\\\"transaction.trx.trx.actions\\\" [title]=\\\"'Actions' | translate\\\" [enablePager]=\\\"false\\\">\\n  <table mat-table [dataSource]=\\\"transaction.trx.trx.actions\\\">\\n    <tr mat-header-row *matHeaderRowDef=\\\"actionsColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: actionsColumns;\\\"></tr>\\n    <ng-container matColumnDef=\\\"index\\\">\\n      <th mat-header-cell *matHeaderCellDef>{{ 'Index' | translate }}</th>\\n      <td mat-cell *matCellDef=\\\"let action; let i = index\\\">\\n        <a [routerLink]=\\\"['/actions',transaction.block_num,transaction.id,i]\\\">{{i + 1}}</a>\\n      </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"account\\\">\\n      <th mat-header-cell *matHeaderCellDef>{{ 'Account' | translate }}</th>\\n      <td mat-cell *matCellDef=\\\"let action\\\">\\n        <!--<a [routerLink]=\\\"['/accounts',action.account]\\\">{{action.account}}</a>-->\\n        <a >CCM</a>\\n      </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"authorization\\\">\\n      <th mat-header-cell *matHeaderCellDef>{{ 'Authorizations' | translate }}</th>\\n      <td mat-cell *matCellDef=\\\"let action\\\">\\n        <span *ngFor=\\\"let auth of action.authorization\\\">\\n          {{auth.actor}}@{{auth.permission}}\\n        </span>\\n      </td>\\n    </ng-container>\\n    <ng-container matColumnDef=\\\"name\\\">\\n      <th mat-header-cell *matHeaderCellDef>{{ 'Name' | translate }}</th>\\n      <td mat-cell *matCellDef=\\\"let action\\\">\\n        {{action.name}}\\n      </td>\\n    </ng-container>\\n  </table>\\n</app-table>\\n\"","module.exports = \":host {\\n  display: block; }\\n\"","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-transaction-actions',\n  templateUrl: './actions.component.html',\n  styleUrls: ['./actions.component.scss']\n})\nexport class ActionsComponent implements OnInit {\n\n  @Input() transaction;\n  actionsColumns = [\n    'index',\n    'account',\n    'authorization',\n    'name'\n  ];\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<div *ngIf=\\\"transaction?.raw; else loading\\\">\\n  <prettyjson [obj]=\\\"transaction.raw\\\"></prettyjson>\\n</div>\\n<ng-template #loading>\\n  <app-spinner></app-spinner>\\n</ng-template>\\n\"","module.exports = \"\"","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-transaction-data',\n  templateUrl: './data.component.html',\n  styleUrls: ['./data.component.scss']\n})\nexport class DataComponent implements OnInit {\n\n  @Input() transaction;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<div *ngIf=\\\"transaction; else loading\\\" style=\\\"margin:10px;\\\">\\n  <mat-card>\\n    <mat-card-content class=\\\"table-container\\\">\\n      <table>\\n        <tr>\\n          <td>{{ 'Transaction ID' | translate }}:</td>\\n          <td>{{transaction.id}}</td>\\n        </tr>\\n        <tr>\\n          <td>{{ 'Block Number' | translate }}:</td>\\n          <td>\\n            <a [routerLink]=\\\"['/blocks',transaction.block_num]\\\">{{transaction.block_num}}</a>\\n          </td>\\n        </tr>\\n        <tr>\\n          <td>{{ 'Timestamp' | translate }}:</td>\\n          <td>{{transaction.block_time | amFromUtc | date:'MMM d, y, h:mm:ss.SSS a'}}</td>\\n        </tr>\\n        <tr>\\n          <td>{{ 'Irreversible' | translate }}:</td>\\n          <td>{{transaction.last_irreversible_block > transaction.block_num}}</td>\\n        </tr>\\n        <tr>\\n          <td>{{ 'Pending' | translate }}:</td>\\n          <td>{{transaction.trx.trx?.delay_sec > 0}}</td>\\n        </tr>\\n        <tr>\\n          <td>{{ 'Status' | translate }}:</td>\\n          <td>{{transaction.trx.receipt.status}}</td>\\n        </tr>\\n        <tr>\\n          <td>{{ 'CPU Usage' | translate }}:</td>\\n          <td>{{transaction.trx.receipt.cpu_usage_us | number }} µs</td>\\n        </tr>\\n        <tr>\\n          <td>{{ 'NET Usage' | translate }}:</td>\\n          <td>{{transaction.trx.receipt.net_usage_words | toKB | number:'1.0-3'}} KB</td>\\n        </tr>\\n        <tr>\\n          <td>{{ 'Number of Actions' | translate }}:</td>\\n          <td>{{transaction.trx.trx?.actions?.length || 0}}</td>\\n        </tr>\\n      </table>\\n    </mat-card-content>\\n  </mat-card>\\n  <div *ngIf=\\\"transaction.trx.trx?.actions?.length\\\" style=\\\"margin-top:20px;\\\">\\n    <app-transaction-actions [transaction]=\\\"transaction\\\"></app-transaction-actions>\\n  </div>\\n</div>\\n<ng-template #loading>\\n  <app-spinner></app-spinner>\\n</ng-template>\\n\"","module.exports = \"\"","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-transaction-information',\n  templateUrl: './information.component.html',\n  styleUrls: ['./information.component.scss']\n})\nexport class InformationComponent implements OnInit {\n\n  @Input() transaction;\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"<mat-toolbar color=\\\"primary\\\">\\n  <h1 class=\\\"mat-headline\\\">\\n    {{ 'Transaction' | translate }}\\n  </h1>\\n</mat-toolbar>\\n<ng-container *ngIf=\\\"transaction$ | async as transaction; else loading\\\">\\n  <mat-tab-group color=\\\"primary\\\" dynamicHeight=\\\"true\\\" *ngIf=\\\"!transaction.isError; else error\\\">\\n    <mat-tab>\\n      <ng-template mat-tab-label>\\n        <mat-icon style=\\\"margin-right:5px;\\\">info</mat-icon>\\n        {{ 'Transaction Information' | translate }}\\n      </ng-template>\\n      <app-transaction-information [transaction]=\\\"transaction.value\\\"></app-transaction-information>\\n    </mat-tab>\\n    <mat-tab>\\n      <ng-template mat-tab-label>\\n        <mat-icon style=\\\"margin-right:5px;\\\">code</mat-icon>\\n        {{ 'BlockchainRawData' | translate }}\\n      </ng-template>\\n      <div style=\\\"margin:10px;\\\">\\n        <ngx-json-viewer [json]=\\\"transaction.value\\\" [expanded]=\\\"true\\\"></ngx-json-viewer>\\n      </div>\\n    </mat-tab>\\n  </mat-tab-group>\\n  <ng-template #error>\\n    <app-error></app-error>\\n  </ng-template>\\n</ng-container>\\n<ng-template #loading>\\n  <app-spinner></app-spinner>\\n</ng-template>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { EosService } from '../../services/eos.service';\nimport { Result } from '../../models';\nimport { Observable } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n\n@Component({\n  templateUrl: './transaction.component.html',\n  styleUrls: ['./transaction.component.scss']\n})\nexport class TransactionComponent implements OnInit {\n\n  transaction$: Observable<Result<any>>;\n\n  constructor(\n    private route: ActivatedRoute,\n    private eosService: EosService\n  ) { }\n\n  ngOnInit() {\n    this.transaction$ = this.route.params.pipe(\n      switchMap(params => this.eosService.getTransactionRaw(+params.blockId, params.id))\n    );\n  }\n\n}\n","module.exports = \"<mat-toolbar color=\\\"primary\\\">\\n  <h1 class=\\\"mat-headline\\\">\\n    {{ 'Transactions' | translate }}\\n  </h1>\\n</mat-toolbar>\\n<div style=\\\"margin:10px;\\\">\\n  <ng-container *ngIf=\\\"blocks$ | async as blocks; else loading\\\">\\n    <mat-accordion [multi]=\\\"true\\\">\\n      <mat-expansion-panel [disabled]=\\\"block.transactions.length === 0\\\" *ngFor=\\\"let block of blocks\\\">\\n        <mat-expansion-panel-header>\\n          <mat-panel-title>\\n            Block #{{block.block_num}}\\n          </mat-panel-title>\\n          <mat-panel-description>\\n            {{block.transactions.length}} transactions\\n          </mat-panel-description>\\n        </mat-expansion-panel-header>\\n        <ng-template matExpansionPanelContent>\\n          <div class=\\\"table-container mat-elevation-z1\\\">\\n            <table mat-table [dataSource]=\\\"block.transactions\\\" style=\\\"border:none;\\\">\\n              <ng-container *ngIf=\\\"columnHeaders$ | async as columnHeaders\\\">\\n                <tr mat-header-row *matHeaderRowDef=\\\"columnHeaders\\\"></tr>\\n                <tr mat-row *matRowDef=\\\"let row; columns: columnHeaders;\\\"></tr>\\n              </ng-container>\\n              <ng-container matColumnDef=\\\"id\\\">\\n                <th mat-header-cell *matHeaderCellDef>{{ 'Transaction ID' | translate }}</th>\\n                <td mat-cell *matCellDef=\\\"let transaction\\\">\\n                  <a [routerLink]=\\\"['/transactions',block.block_num,transaction.trx.id||transaction.trx]\\\">\\n                    <id-64 [id]=\\\"transaction.trx.id || transaction.trx\\\"></id-64>\\n                  </a>\\n                </td>\\n              </ng-container>\\n              <ng-container matColumnDef=\\\"cpu\\\">\\n                <th mat-header-cell *matHeaderCellDef>{{ 'CPU Usage' | translate }}</th>\\n                <td mat-cell *matCellDef=\\\"let transaction\\\">\\n                  {{transaction.cpu_usage_us | number }} µs\\n                </td>\\n              </ng-container>\\n              <ng-container matColumnDef=\\\"net\\\">\\n                <th mat-header-cell *matHeaderCellDef>{{ 'NET Usage' | translate }}</th>\\n                <td mat-cell *matCellDef=\\\"let transaction\\\">\\n                  {{transaction.net_usage_words | toKB | number:'1.0-3'}} KB\\n                </td>\\n              </ng-container>\\n              <ng-container matColumnDef=\\\"actions\\\">\\n                <th mat-header-cell *matHeaderCellDef>{{ 'Actions' | translate }}</th>\\n                <td mat-cell *matCellDef=\\\"let transaction\\\">\\n                  {{transaction.trx.transaction?.actions?.length || 0}}\\n                </td>\\n              </ng-container>\\n            </table>\\n          </div>\\n        </ng-template>\\n      </mat-expansion-panel>\\n    </mat-accordion>\\n    <mat-paginator [pageIndex]=\\\"pageIndex\\\" [pageSize]=\\\"pageSize\\\" [length]=\\\"total\\\" (page)=\\\"onPaging($event)\\\" style=\\\"margin-top:16px;\\\"></mat-paginator>\\n  </ng-container>\\n  <ng-template #loading>\\n    <app-spinner></app-spinner>\\n  </ng-template>\\n</div>\\n\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable, of } from 'rxjs';\nimport { map, tap } from 'rxjs/operators';\nimport { AppService } from '../../services/app.service';\n\n@Component({\n  templateUrl: './transactions.component.html',\n  styleUrls: ['./transactions.component.scss']\n})\nexport class TransactionsComponent implements OnInit {\n\n  columnHeaders$: Observable<string[]> = of(DEFAULT_HEADERS);\n  blocks$: Observable<any[]>;\n  pageIndex = 0;\n  pageSize = 10;\n  total = 0;\n\n  constructor(\n    private breakpointObserver: BreakpointObserver,\n    private appService: AppService\n  ) { }\n\n  ngOnInit() {\n    this.columnHeaders$ = this.breakpointObserver.observe(Breakpoints.XSmall).pipe(\n      map(result => result.matches ? XSMALL_HEADERS : DEFAULT_HEADERS)\n    );\n    this.blocks$ = this.appService.getBlocks(this.pageIndex, this.pageSize).pipe(\n      tap(blocks => {\n        this.total = blocks[0].block_num;\n      })\n    );\n  }\n\n  onPaging(pageEvent) {\n    this.pageIndex = pageEvent.pageIndex;\n    this.blocks$ = this.appService.getBlocks(pageEvent.length - pageEvent.pageSize * pageEvent.pageIndex);\n  }\n\n}\n\nconst DEFAULT_HEADERS = [\n  'id',\n  'cpu',\n  'net',\n  'actions'\n];\n\nconst XSMALL_HEADERS = [\n  'id',\n  'actions'\n];\n"],"sourceRoot":""}